/*

https://leetcode.com/problems/surrounded-regions/

Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example:

X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X

*/

  vector<int> dir = {0,1,0,-1,0};
  int row;
  int col;

  void solve(vector<vector<char>>& board) {
      row = board.size();
      if(row==0) return;
      col = board[0].size();
      /* 
      Any boarder elements and all element that is reachable to border element through visiting only 'O' elements, would not be flipped. we need to find these elements first.
      Then, traverse the board, and flipped all other 'O' elements.
      */

      for(int i=0; i<row; i++){
          if(board[i][0] == 'O'){
              dfs(board,i,0);
          }
          if(board[i][col-1]=='O'){
              dfs(board,i,col-1);
          }
      }
      for(int j=0; j<col; j++){
          if(board[0][j] == 'O'){
              dfs(board,0,j);
          }
          if(board[row-1][j]== 'O'){
              dfs(board,row-1,j);
          }
      }

      for(int i=0; i<row; i++){
          for(int j=0; j<col; j++){
              if(board[i][j]=='O'){
                  board[i][j]='X';
              }else if(board[i][j]=='Y'){
                  board[i][j]='O';
              }
          }
      }
  }

  void dfs(vector<vector<char>>& board, int r, int c){
      board[r][c] = 'Y';
      for(int i=0; i<4; i++){
          if(discover(board, r+dir[i], c+dir[i+1])){
              dfs(board, r+dir[i], c+dir[i+1]);
          }
      }   
  }

  bool discover(vector<vector<char>>& board, int i, int j){
      if(i>=0 && i<board.size() && j>=0 && j<board[0].size() && board[i][j]=='O'){
          return true;
      }
      return false;
  }
